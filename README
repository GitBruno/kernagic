Kernagic
========

Kernagic is a tool for spacing fonts. It provides a selection of methods that
can be previewed and tuned interactively. 

To fit into a diverse set of workflows, Kernagic uses UFO fonts for input. UFO can act as a superset of other formats, and tools like [Fontforge](http://github.com/fontforge/fontforge/) can be used for converting to and from it.

Some methods relies on automatically detected stems, if the stem detection works poorly with your font, or you want to override spacing decisions, you can insert your own stems by clicking in the preview; stem overrides are saved in the UFO's private `lib.plist`.

If metrics are determined, they can be saved back into the UFO (shifting the x co-ordinates of all points in all glyphs to change the left bearings, and setting a new advance width to set the right bearings.)

For help about the commandline interface, `kernagic --help` provides further documentation.

Spacing Methods
===================

These are the various spacing methods implemented in Kernagic to date. The application is intended to be modular, so any programmer familiar with C and GTK+ can explore their own methods:

Inkbounds
--------------

A simple method, included for debugging only; no side-bearings.

Renaissance Cadence Table
-------------------------

A predefined spacing table method. 

This table encodes knowledge of glyph morphologies, found in Frank Blokland's
excellent [Letter Model](http://lettermodel.org). This table is also provided
as an external text file; other files following the same format can be used
for detailed control over this method.

It assumes your typeface is a traditional renaissance design, with classic glyph proportions, and automatically prepares a fitting.

Currently this only produces metrics, not kerning.

Fixed and snapped iter glyph rythm gap distance
-----------------------------------------------

This method allows specifying a desired snapping cadence (all glyph advances
ends up on a multiple of this value.) And a desired target distance between
rythm points of neighbouring glyphs.

Currently this only produces metrics, not kerning.
